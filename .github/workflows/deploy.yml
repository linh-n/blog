name: Deploy to Cloudflare Pages
on:
  push:
    branches:
      - master
      - dev

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      HUGO_CACHE_DIR: /tmp/hugo_cache
      WRANGLER_VERSION: 3.90.0
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: latest
          extended: true

      - uses: actions/cache@v4
        with:
          path: ${{ env.HUGO_CACHE_DIR }}
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-

      - name: Build
        run: hugo --minify

      - name: Cache wrangler
        id: wrangler-cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: wrangler-${{ runner.os }}-${{ env.WRANGLER_VERSION }}
          restore-keys: |
            wrangler-${{ runner.os }}-${{ env.WRANGLER_VERSION }}-

      - name: Install wrangler
        run: |
          echo "Installing wrangler version ${{ env.WRANGLER_VERSION }}"
          npm install wrangler@${{ env.WRANGLER_VERSION }}

      - name: Deploy to cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT }}
          command: >
            pages deploy public --project-name=blog
            ${{ github.ref == 'refs/heads/dev' && '--branch=dev' || '' }}

      - name: Cloudflare cache purge
        if: github.ref == 'refs/heads/master'
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

  warmup:
    name: Warm up cache
    needs: deploy
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for cache purge
        run: sleep 5
        
      - name: Fetch sitemap and warm up cache
        run: |
          echo "Fetching sitemap.xml and warming up cache..."
          # Download sitemap
          SITEMAP=$(curl -s "${{ vars.SITE_URL }}/sitemap.xml")
          # Extract URLs
          URLS=$(echo "$SITEMAP" | grep -oP '(?<=<loc>).*?(?=</loc>)')
          # Request each URL
          for URL in $URLS; do
            echo "Warming up [0]: $URL"
            curl -s -o /dev/null -w "%{http_code}\n" "$URL"
          done
          for URL in $URLS; do
            echo "Warming up [1]: $URL"
            curl -s -o /dev/null -w "%{http_code}\n" "$URL"
          done
          echo "Cache warm-up completed"
