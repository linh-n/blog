name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - master
      - dev

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      HUGO_CACHE_DIR: /tmp/hugo_cache
      WRANGLER_VERSION: 3.90.0
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: latest
          extended: true

      - uses: actions/cache@v4
        with:
          path: ${{ env.HUGO_CACHE_DIR }}
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-

      - name: Build
        run: hugo --minify

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Deploy to Cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT }}
          command: npx wrangler@${{ env.WRANGLER_VERSION }} pages deploy public --project-name=blog --branch=${{ github.ref_name }}

      - name: Cloudflare cache purge
        if: github.ref_name == 'master'
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

      - name: Cleanup old deployments
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT }}
          CF_PAGES_PROJECT_NAME: blog
        run: |
          set -euxo pipefail

          echo "Fetching deployments..."
          curl -s -X GET \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/pages/projects/$CF_PAGES_PROJECT_NAME/deployments?page=1&per_page=20" |
          jq -r '
            if .success then
              .result
              | group_by(.deployment_trigger.metadata.branch)
              | map(
                  if .[0].deployment_trigger.metadata.branch == "master" then
                    .[8:]
                  elif .[0].deployment_trigger.metadata.branch == "dev" then
                    .[2:]
                  else
                    empty
                  end
                )
              | flatten
              | .[].id
            else
              empty
            end
          ' |
          while read -r id; do
            echo "Deleting deployment $id"
            curl -s -X DELETE \
              -H "Authorization: Bearer $CF_API_TOKEN" \
              "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/pages/projects/$CF_PAGES_PROJECT_NAME/deployments/$id?force=true" |
              jq -e '.success' >/dev/null || echo "❌ Failed to delete $id"
            sleep 0.5
          done

      - name: Warm up pages and assets
        env:
          SITE_URL: ${{ vars.SITE_URL }}
        run: |
          set -euxo pipefail

          echo "Fetching sitemap from $SITE_URL/sitemap.xml"
          sitemap=$(curl -s "$SITE_URL/sitemap.xml")

          echo "Parsing page URLs..."
          mapfile -t page_urls < <(echo "$sitemap" | grep -oP '(?<=<loc>).*?(?=</loc>)')

          echo "Fetching homepage from $SITE_URL"
          homepage=$(curl -s "$SITE_URL")

          echo "Parsing asset URLs..."
          mapfile -t asset_urls < <(
            echo "$homepage" | grep -oE 'src="([^"]+)"' | cut -d'"' -f2
            echo "$homepage" | grep -oE 'href="([^"]+)"' | cut -d'"' -f2
            echo "$homepage" | grep -oE 'url\(([^)]+)\)' | sed 's/url(//g; s/)//g; s/["'\'']//g'
          )

          # Deduplicate assets
          asset_urls=($(printf "%s\n" "${asset_urls[@]}" | sort -u))

          # Prepend SITE_URL to relative assets
          for i in "${!asset_urls[@]}"; do
            asset="${asset_urls[$i]}"
            if [[ ! "$asset" =~ ^https?:// ]]; then
              asset_urls[$i]="${SITE_URL%/}/$(echo "$asset" | sed 's#^/##')"
            fi
          done

          echo "Warming up ${#page_urls[@]} pages and ${#asset_urls[@]} assets..."
          printf "%s\n" "${page_urls[@]}" "${asset_urls[@]}" | xargs -n 1 -P 10 -I {} curl -s -o /dev/null -w "✅ %{http_code} {}\\n" "{}"
