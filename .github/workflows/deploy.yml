name: Deploy to Cloudflare Pages
on:
  push:
    branches:
      - master
      - dev

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      HUGO_CACHE_DIR: /tmp/hugo_cache
      WRANGLER_VERSION: 3.90.0
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: latest
          extended: true

      - uses: actions/cache@v4
        with:
          path: ${{ env.HUGO_CACHE_DIR }}
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-

      - name: Build
        run: hugo --minify

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Cache wrangler
        id: wrangler-cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: wrangler-${{ runner.os }}-${{ env.WRANGLER_VERSION }}
          restore-keys: |
            wrangler-${{ runner.os }}-${{ env.WRANGLER_VERSION }}-

      - name: Install wrangler
        run: |
          echo "Installing wrangler version ${{ env.WRANGLER_VERSION }}"
          npm install wrangler@${{ env.WRANGLER_VERSION }}

      - name: Deploy to cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT }}
          command: pages deploy public --project-name=blog --branch=${{ github.ref_name }}

      - name: Cloudflare cache purge
        if: github.ref_name == 'master'
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

      - name: Cleanup old deployments
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT }}
          CF_PAGES_PROJECT_NAME: blog
        run: |
          set -e

          echo "Fetching all deployments..."
          DEPLOYMENTS=$(curl -s -X GET \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/pages/projects/$CF_PAGES_PROJECT_NAME/deployments?page=1&per_page=20")

          echo "$DEPLOYMENTS" | jq -e '.success' >/dev/null || {
            echo "Failed to fetch deployments."
            exit 1
          }

          # Parse deployments and group by branch
          echo "$DEPLOYMENTS" | jq -r '.result[] | "\(.id) \(.deployment_trigger.metadata.branch) \(.created_on)"' |
            sort -k3 -r |
            awk '
              {
                id=$1; branch=$2;
                if (branch == "master") {
                  master[++m]=id
                } else if (branch == "dev") {
                  dev[++d]=id
                }
              }
              END {
                for (i = 8; i <= m; i++) {
                  print master[i]
                }
                for (i = 2; i <= d; i++) {
                  print dev[i]
                }
              }
            ' > deployments_to_delete.txt

          echo "Deployments to delete:"
          cat deployments_to_delete.txt

          while read -r id; do
            echo "Deleting deployment $id"
            curl -s -X DELETE \
              -H "Authorization: Bearer $CF_API_TOKEN" \
              "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/pages/projects/$CF_PAGES_PROJECT_NAME/deployments/$id?force=true" |
              jq -e '.success' >/dev/null || echo "Failed to delete $id"
            sleep 0.5
          done < deployments_to_delete.txt

    
      - name: Warm up cache
        run: |
          set -e
          curl -sSL "${{ vars.SITE_URL }}/sitemap.xml" | \
            grep -oP '(?<=<loc>)[^<]+' | \
            xargs -n1 -P10 curl -s -o /dev/null -w "%{http_code} %{url_effective}\n"
