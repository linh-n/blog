name: Deploy
on:
  push:
    branches:
      - master
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HUGO_CACHEDIR: /tmp/hugo_cache
      WRANGLER_VERSION: 3.90.0
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: latest
          extended: true

      - uses: actions/cache@v4
        with:
          path: ${{ env.HUGO_CACHEDIR }}
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-

      - name: Build
        run: hugo --minify

      - name: Cache wrangler
        id: wrangler-cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: wrangler-${{ runner.os }}-${{ env.WRANGLER_VERSION }}
          restore-keys: |
            wrangler-${{ runner.os }}-${{ env.WRANGLER_VERSION }}-

      - name: Install wrangler
        run: |
          # Check if wrangler version is already installed
          installed_version=$(npx --no-install wrangler --version || true)
          
          # If the installed version does not match the specified version, install the correct version
          if [[ "$installed_version" != "${{ env.WRANGLER_VERSION }}" ]]; then
            echo "Installing wrangler version ${{ env.WRANGLER_VERSION }}"
            npm install wrangler@${{ env.WRANGLER_VERSION }}
          else
            echo "Wrangler version $installed_version already installed"
          fi

      - name: Deploy to cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT }}
          command: >
            pages deploy public --project-name=blog
            ${{ github.ref == 'refs/heads/dev' && '--branch=dev' || '' }}

      - name: Delete old deployments
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          
          # Set number of deployments to keep depending on the branch
          if [ "$BRANCH_NAME" = "master" ]; then
            KEEP_LIMIT=10
          elif [ "$BRANCH_NAME" = "dev" ]; then
            KEEP_LIMIT=2
          else
            echo "No deployment cleanup rules for branch: $BRANCH_NAME"
            exit 0
          fi

          echo "Keeping $KEEP_LIMIT deployments for branch: $BRANCH_NAME"

          # Fetch deployments (up to 100) for this branch
          deployments=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT }}/pages/projects/blog/deployments?branch=$BRANCH_NAME&per_page=100" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_TOKEN }}" \
            -H "Content-Type: application/json")

          # Extract deployment IDs beyond the KEEP_LIMIT
          deployment_ids=$(echo "$deployments" | jq -r --argjson keep "$KEEP_LIMIT" '.result | sort_by(.created_on) | reverse | .[$keep:][]?.id')

          if [ -z "$deployment_ids" ]; then
            echo "No old deployments to delete."
            exit 0
          fi

          # Delete each old deployment
          for id in $deployment_ids; do
            echo "Deleting deployment $id"
            curl -s -X DELETE "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT }}/pages/projects/blog/deployments/$id" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_TOKEN }}" \
              -H "Content-Type: application/json"
          done
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Cloudflare cache purge
        if: github.ref == 'refs/heads/master'
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
